# PIPELINE DEFINITION
# Name: 03-video-insights
# Description: Video Insights Pipeline
# Inputs:
#    s3_access_key_id: str
#    s3_bucket: str
#    s3_endpoint_url: str
#    s3_region: str
#    s3_secret_access_key: str
#    s3_service_name: str
components:
  comp-createpvc:
    executorLabel: exec-createpvc
    inputDefinitions:
      parameters:
        access_modes:
          description: 'AccessModes to request for the provisioned PVC. May

            be one or more of ``''ReadWriteOnce''``, ``''ReadOnlyMany''``, ``''ReadWriteMany''``,
            or

            ``''ReadWriteOncePod''``. Corresponds to `PersistentVolumeClaim.spec.accessModes
            <https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes>`_.'
          parameterType: LIST
        annotations:
          description: Annotations for the PVC's metadata. Corresponds to `PersistentVolumeClaim.metadata.annotations
            <https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#PersistentVolumeClaim>`_.
          isOptional: true
          parameterType: STRUCT
        pvc_name:
          description: 'Name of the PVC. Corresponds to `PersistentVolumeClaim.metadata.name
            <https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#PersistentVolumeClaim>`_.
            Only one of ``pvc_name`` and ``pvc_name_suffix`` can

            be provided.'
          isOptional: true
          parameterType: STRING
        pvc_name_suffix:
          description: 'Prefix to use for a dynamically generated name, which

            will take the form ``<argo-workflow-name>-<pvc_name_suffix>``. Only one

            of ``pvc_name`` and ``pvc_name_suffix`` can be provided.'
          isOptional: true
          parameterType: STRING
        size:
          description: The size of storage requested by the PVC that will be provisioned.
            For example, ``'5Gi'``. Corresponds to `PersistentVolumeClaim.spec.resources.requests.storage
            <https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#PersistentVolumeClaimSpec>`_.
          parameterType: STRING
        storage_class_name:
          defaultValue: ''
          description: 'Name of StorageClass from which to provision the PV

            to back the PVC. ``None`` indicates to use the cluster''s default

            storage_class_name. Set to ``''''`` for a statically specified PVC.'
          isOptional: true
          parameterType: STRING
        volume_name:
          description: 'Pre-existing PersistentVolume that should back the

            provisioned PersistentVolumeClaim. Used for statically

            specified PV only. Corresponds to `PersistentVolumeClaim.spec.volumeName
            <https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#PersistentVolumeClaimSpec>`_.'
          isOptional: true
          parameterType: STRING
    outputDefinitions:
      parameters:
        name:
          parameterType: STRING
  comp-delete-artifacts:
    executorLabel: exec-delete-artifacts
  comp-deletepvc:
    executorLabel: exec-deletepvc
    inputDefinitions:
      parameters:
        pvc_name:
          description: Name of the PVC to delete. Supports passing a runtime-generated
            name, such as a name provided by ``kubernetes.CreatePvcOp().outputs['name']``.
          parameterType: STRING
  comp-download-video:
    executorLabel: exec-download-video
    inputDefinitions:
      parameters:
        pipeline_name:
          parameterType: STRING
        s3_access_key_id:
          parameterType: STRING
        s3_bucket:
          parameterType: STRING
        s3_endpoint_url:
          parameterType: STRING
        s3_region:
          parameterType: STRING
        s3_secret_access_key:
          parameterType: STRING
        s3_service_name:
          parameterType: STRING
  comp-extract-audio:
    executorLabel: exec-extract-audio
  comp-extract-speeches:
    executorLabel: exec-extract-speeches
  comp-extract-summary:
    executorLabel: exec-extract-summary
  comp-prepare-video:
    executorLabel: exec-prepare-video
  comp-translate-english-portuguese:
    executorLabel: exec-translate-english-portuguese
  comp-translate-english-spanish:
    executorLabel: exec-translate-english-spanish
  comp-upload-artifacts:
    executorLabel: exec-upload-artifacts
    inputDefinitions:
      parameters:
        pipeline_name:
          parameterType: STRING
        s3_access_key_id:
          parameterType: STRING
        s3_bucket:
          parameterType: STRING
        s3_endpoint_url:
          parameterType: STRING
        s3_region:
          parameterType: STRING
        s3_secret_access_key:
          parameterType: STRING
        s3_service_name:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-createpvc:
      container:
        image: argostub/createpvc
    exec-delete-artifacts:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - delete_artifacts
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef delete_artifacts():\n    \"\"\"\n    Deletes the pipeline artifacts.\n\
          \    \"\"\"\n\n    import os\n    import shutil\n\n    shutil.rmtree(os.path.join('/',\
          \ 'pipeline', 'artifacts'))\n\n"
        image: registry.access.redhat.com/ubi9/python-311
    exec-deletepvc:
      container:
        image: argostub/deletepvc
    exec-download-video:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - download_video
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'boto3' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef download_video(\n    s3_service_name      : str,\n    s3_endpoint_url\
          \      : str,\n    s3_access_key_id     : str,\n    s3_secret_access_key\
          \ : str,\n    s3_region            : str,\n    s3_bucket            : str,\n\
          \    pipeline_name        : str\n):\n    \"\"\"\n    Downloads the video\
          \ from the s3 bucket.\n\n    Parameters:\n        - s3_service_name    \
          \  (str) : The name of the s3 service. It should be 's3'.\n        - s3_endpoint_url\
          \      (str) : The url of the s3 endpoint.\n        - s3_access_key_id \
          \    (str) : The access key id for authentication.\n        - s3_secret_access_key\
          \ (str) : The secret access key for authentication.\n        - s3_region\
          \            (str) : The region where the s3 bucket is located.\n      \
          \  - s3_bucket            (str) : The s3 bucket where the video will be\
          \ downloaded.\n        - pipeline_name        (str) : The name of the pipeline.\n\
          \    \"\"\"\n\n    import boto3\n    import os\n\n    artifacts_directory\
          \ = os.path.join('/', 'pipeline', 'artifacts')\n    os.makedirs(artifacts_directory)\n\
          \n    s3_video_file = os.path.join(pipeline_name, 'video.mp4')\n    video_file\
          \    = os.path.join(artifacts_directory, os.path.basename(s3_video_file))\n\
          \n    s3_client = boto3.client(\n        service_name          = s3_service_name,\n\
          \        endpoint_url          = s3_endpoint_url,\n        aws_access_key_id\
          \     = s3_access_key_id,\n        aws_secret_access_key = s3_secret_access_key,\n\
          \        region_name           = s3_region\n    )\n\n    s3_client.download_file(s3_bucket,\
          \ s3_video_file, video_file)\n\n"
        image: registry.access.redhat.com/ubi9/python-311
    exec-extract-audio:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - extract_audio
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'moviepy' &&\
          \ \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef extract_audio():\n    \"\"\"\n    Extracts the audio from the\
          \ video.\n    \"\"\"\n\n    import os\n    from moviepy.editor import VideoFileClip\n\
          \n    artifacts_directory = os.path.join('/', 'pipeline', 'artifacts')\n\
          \    video_file          = os.path.join(artifacts_directory, 'video.mp4')\n\
          \    video_audio_file    = os.path.join(artifacts_directory, 'video_audio.mp3')\n\
          \n    video_file_clip = VideoFileClip(video_file)\n    video_file_clip.audio.write_audiofile(video_audio_file)\n\
          \n"
        image: registry.access.redhat.com/ubi9/python-311
    exec-extract-speeches:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - extract_speeches
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'torch' 'transformers'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef extract_speeches():\n    \"\"\"\n    Extracts the speeches from\
          \ the video.\n    \"\"\"\n\n    import os\n    import tarfile\n    import\
          \ urllib.request\n\n    from transformers import pipeline\n\n    ffmpeg_url\
          \  = 'https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz'\n\
          \    ffmpeg_file = os.path.basename(ffmpeg_url)\n\n    urllib.request.urlretrieve(ffmpeg_url,\
          \ ffmpeg_file)\n\n    with tarfile.open(ffmpeg_file) as ffmpeg_tarfile:\n\
          \n        ffmpeg_tarfile.extractall()\n\n    for directory in next(os.walk('.'))[1]:\n\
          \n        if directory.startswith('ffmpeg'):\n\n            ffmpeg_directory\
          \ = os.path.join(os.getcwd(), directory)\n            break\n\n    os.environ['PATH']\
          \ += os.pathsep + ffmpeg_directory\n\n    artifacts_directory = os.path.join('/',\
          \ 'pipeline', 'artifacts')\n    video_audio_file    = os.path.join(artifacts_directory,\
          \ 'video_audio.mp3')\n    video_speeches_file = os.path.join(artifacts_directory,\
          \ 'video_speeches.txt')\n\n    pipe     = pipeline(task = 'automatic-speech-recognition',\
          \ model = 'openai/whisper-tiny')\n    speeches = pipe(video_audio_file)\n\
          \n    with open(video_speeches_file, 'w') as file:\n\n        file.write(speeches['text'])\n\
          \n"
        image: registry.access.redhat.com/ubi9/python-311
    exec-extract-summary:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - extract_summary
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'torch' 'transformers'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef extract_summary():\n    \"\"\"\n    Extracts the summary from\
          \ the video.\n    \"\"\"\n\n    import os\n    from transformers import\
          \ pipeline\n\n    artifacts_directory = os.path.join('/', 'pipeline', 'artifacts')\n\
          \    video_speeches_file = os.path.join(artifacts_directory, 'video_speeches.txt')\n\
          \    video_summary_file  = os.path.join(artifacts_directory, 'video_summary.txt')\n\
          \n    with open(video_speeches_file, 'r') as file:\n\n        speeches =\
          \ file.read()\n\n    pipe    = pipeline(task = 'summarization', model =\
          \ 'sshleifer/distilbart-cnn-12-6')\n    summary = pipe(speeches)\n\n   \
          \ with open(video_summary_file, 'w') as file:\n\n        file.write(summary[0]['summary_text'])\n\
          \n"
        image: registry.access.redhat.com/ubi9/python-311
    exec-prepare-video:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - prepare_video
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef prepare_video():\n    \"\"\"\n    Prepares the video for extracting\
          \ insights.\n    \"\"\"\n\n"
        image: registry.access.redhat.com/ubi9/python-311
    exec-translate-english-portuguese:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - translate_english_portuguese
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'torch' 'transformers'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef translate_english_portuguese():\n    \"\"\"\n    Translates the\
          \ summary of the video to portuguese.\n    \"\"\"\n\n    import os\n   \
          \ from transformers import pipeline\n\n    artifacts_directory         \
          \  = os.path.join('/', 'pipeline', 'artifacts')\n    video_summary_file\
          \            = os.path.join(artifacts_directory, 'video_summary.txt')\n\
          \    video_summary_portuguese_file = os.path.join(artifacts_directory, 'video_summary_portuguese.txt')\n\
          \n    with open(video_summary_file, 'r') as file:\n\n        speeches =\
          \ file.read()\n\n    pipe        = pipeline(task = 'translation', model\
          \ = 'unicamp-dl/translation-en-pt-t5')\n    translation = pipe(speeches)\n\
          \n    with open(video_summary_portuguese_file, 'w') as file:\n\n       \
          \ file.write(translation[0]['translation_text'])\n\n"
        image: registry.access.redhat.com/ubi9/python-311
    exec-translate-english-spanish:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - translate_english_spanish
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'torch' 'sentencepiece'\
          \ 'transformers' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef translate_english_spanish():\n    \"\"\"\n    Translates the\
          \ summary of the video to spanish.\n    \"\"\"\n\n    import os\n    from\
          \ transformers import pipeline\n\n    artifacts_directory        = os.path.join('/',\
          \ 'pipeline', 'artifacts')\n    video_summary_file         = os.path.join(artifacts_directory,\
          \ 'video_summary.txt')\n    video_summary_spanish_file = os.path.join(artifacts_directory,\
          \ 'video_summary_spanish.txt')\n\n    with open(video_summary_file, 'r')\
          \ as file:\n\n        speeches = file.read()\n\n    pipe        = pipeline(task\
          \ = 'translation', model = 'Helsinki-NLP/opus-mt-en-es')\n    translation\
          \ = pipe(speeches)\n\n    with open(video_summary_spanish_file, 'w') as\
          \ file:\n\n        file.write(translation[0]['translation_text'])\n\n"
        image: registry.access.redhat.com/ubi9/python-311
    exec-upload-artifacts:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_artifacts
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.7.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'boto3' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_artifacts(\n    s3_service_name      : str,\n    s3_endpoint_url\
          \      : str,\n    s3_access_key_id     : str,\n    s3_secret_access_key\
          \ : str,\n    s3_region            : str,\n    s3_bucket            : str,\n\
          \    pipeline_name        : str\n):\n    \"\"\"\n    Uploads the pipeline\
          \ artifacts to the s3 bucket.\n\n    Parameters:\n        - s3_service_name\
          \      (str) : The name of the s3 service. It should be 's3'.\n        -\
          \ s3_endpoint_url      (str) : The url of the s3 endpoint.\n        - s3_access_key_id\
          \     (str) : The access key id for authentication.\n        - s3_secret_access_key\
          \ (str) : The secret access key for authentication.\n        - s3_region\
          \            (str) : The region where the s3 bucket is located.\n      \
          \  - s3_bucket            (str) : The s3 bucket where the artifacts will\
          \ be uploaded.\n        - pipeline_name        (str) : The name of the pipeline.\n\
          \    \"\"\"\n\n    import boto3\n    import os\n    import shutil\n\n  \
          \  artifacts_directory = os.path.join('/', 'pipeline', 'artifacts')\n\n\
          \    file    = shutil.make_archive('artifacts', 'zip', artifacts_directory)\n\
          \    s3_file = os.path.join(pipeline_name, os.path.basename(file))\n\n \
          \   s3_client = boto3.client(\n        service_name          = s3_service_name,\n\
          \        endpoint_url          = s3_endpoint_url,\n        aws_access_key_id\
          \     = s3_access_key_id,\n        aws_secret_access_key = s3_secret_access_key,\n\
          \        region_name           = s3_region\n    )\n\n    s3_client.upload_file(file,\
          \ s3_bucket, s3_file)\n\n"
        image: registry.access.redhat.com/ubi9/python-311
pipelineInfo:
  description: Video Insights Pipeline
  name: 03-video-insights
root:
  dag:
    tasks:
      createpvc:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-createpvc
        inputs:
          parameters:
            access_modes:
              runtimeValue:
                constant:
                - ReadWriteOnce
            pvc_name_suffix:
              runtimeValue:
                constant: -pipeline-pvc
            size:
              runtimeValue:
                constant: 1Gi
            storage_class_name:
              runtimeValue:
                constant: ocs-external-storagecluster-ceph-rbd
        taskInfo:
          name: createpvc
      delete-artifacts:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-delete-artifacts
        dependentTasks:
        - upload-artifacts
        taskInfo:
          name: delete-artifacts
      deletepvc:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-deletepvc
        dependentTasks:
        - createpvc
        - delete-artifacts
        inputs:
          parameters:
            pvc_name:
              taskOutputParameter:
                outputParameterKey: name
                producerTask: createpvc
        taskInfo:
          name: deletepvc
      download-video:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-download-video
        dependentTasks:
        - createpvc
        inputs:
          parameters:
            pipeline_name:
              runtimeValue:
                constant: 03_video_insights
            s3_access_key_id:
              componentInputParameter: s3_access_key_id
            s3_bucket:
              componentInputParameter: s3_bucket
            s3_endpoint_url:
              componentInputParameter: s3_endpoint_url
            s3_region:
              componentInputParameter: s3_region
            s3_secret_access_key:
              componentInputParameter: s3_secret_access_key
            s3_service_name:
              componentInputParameter: s3_service_name
        taskInfo:
          name: download-video
      extract-audio:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-extract-audio
        dependentTasks:
        - createpvc
        - prepare-video
        taskInfo:
          name: extract-audio
      extract-speeches:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-extract-speeches
        dependentTasks:
        - createpvc
        - extract-audio
        taskInfo:
          name: extract-speeches
      extract-summary:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-extract-summary
        dependentTasks:
        - createpvc
        - extract-speeches
        taskInfo:
          name: extract-summary
      prepare-video:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-prepare-video
        dependentTasks:
        - createpvc
        - download-video
        taskInfo:
          name: prepare-video
      translate-english-portuguese:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-translate-english-portuguese
        dependentTasks:
        - createpvc
        - extract-summary
        taskInfo:
          name: translate-english-portuguese
      translate-english-spanish:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-translate-english-spanish
        dependentTasks:
        - createpvc
        - extract-summary
        taskInfo:
          name: translate-english-spanish
      upload-artifacts:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-upload-artifacts
        dependentTasks:
        - createpvc
        - translate-english-portuguese
        inputs:
          parameters:
            pipeline_name:
              runtimeValue:
                constant: 03_video_insights
            s3_access_key_id:
              componentInputParameter: s3_access_key_id
            s3_bucket:
              componentInputParameter: s3_bucket
            s3_endpoint_url:
              componentInputParameter: s3_endpoint_url
            s3_region:
              componentInputParameter: s3_region
            s3_secret_access_key:
              componentInputParameter: s3_secret_access_key
            s3_service_name:
              componentInputParameter: s3_service_name
        taskInfo:
          name: upload-artifacts
  inputDefinitions:
    parameters:
      s3_access_key_id:
        parameterType: STRING
      s3_bucket:
        parameterType: STRING
      s3_endpoint_url:
        parameterType: STRING
      s3_region:
        parameterType: STRING
      s3_secret_access_key:
        parameterType: STRING
      s3_service_name:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.7.0
---
platforms:
  kubernetes:
    deploymentSpec:
      executors:
        exec-extract-audio:
          pvcMount:
          - mountPath: /pipeline
            taskOutputParameter:
              outputParameterKey: name
              producerTask: createpvc
        exec-extract-speeches:
          pvcMount:
          - mountPath: /pipeline
            taskOutputParameter:
              outputParameterKey: name
              producerTask: createpvc
        exec-extract-summary:
          pvcMount:
          - mountPath: /pipeline
            taskOutputParameter:
              outputParameterKey: name
              producerTask: createpvc
        exec-prepare-video:
          pvcMount:
          - mountPath: /pipeline
            taskOutputParameter:
              outputParameterKey: name
              producerTask: createpvc
        exec-translate-english-portuguese:
          pvcMount:
          - mountPath: /pipeline
            taskOutputParameter:
              outputParameterKey: name
              producerTask: createpvc
        exec-translate-english-spanish:
          pvcMount:
          - mountPath: /pipeline
            taskOutputParameter:
              outputParameterKey: name
              producerTask: createpvc
        exec-upload-artifacts:
          pvcMount:
          - mountPath: /pipeline
            taskOutputParameter:
              outputParameterKey: name
              producerTask: createpvc
          - mountPath: /pipeline
            taskOutputParameter:
              outputParameterKey: name
              producerTask: createpvc
